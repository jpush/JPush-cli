#!/usr/bin/env node

var program = require('commander'),
  client = require('../index'),
  debug = require('debug')('shell: jpush'),
    fs = require('fs'),
    path = require('path'),
  jpushInfo = require('../package.json');

var jpushKeyFile = path.resolve('.') + '/jpush_key.json'

debug(jpushKeyFile)

  program
    .version(jpushInfo.version)
    .option('-m, --message [message]', 'push message')
    .option('-t, --tags [tags]', 'set push tags')
    .option('-a, --alias [alias]', 'set push alias')
    .option('-p, --platform [platform]', 'just support android or ios, default android', 'android')
    .option('-c, --custom [custom]', 'just support android')
    .option('-k, --key [key]', 'just support android')



  program
    .command('init')
    .description('init jpush key file')
    .action(function(){
        var jpushKeyInfo = {
            appkey : "",
            masterSecret : ""
        }
        fs.writeFileSync(jpushKeyFile, JSON.stringify(jpushKeyInfo))
        process.exit();
    });

  program.parse(process.argv);
  //show help
  program.on('--help', function () {
    process.exit();
  });


function showHelp() {
  process.stdout.write(program.helpInformation());
  program.emit('--help');
}

var keyFileExists = fs.existsSync(jpushKeyFile)

//checkout current key file exists
if (keyFileExists) {
    push(jpushKeyFile)
}else{
    console.log('jpush_key.json not exists you should exec jpush init')
}

function push(jpushKeyFile) {

    var config = require(jpushKeyFile)

    if (!config.appkey && !config.masterSecret){
        console.log('you should set appkey and masterSecret in jpus_key.json')
        process.exit();
    }
    if(program.message || program.custom && program.receiver > 1 && program.receiver < 5 ) {
        var params = {}
        params.receiver = {}
        params.receiver.type =  4

        if(program.tags){
             params.receiver.type =  2
             params.receiver.value = program.tags
        }

        if(program.alias){
             params.receiver.type =  3
             params.receiver.value = program.alias
        }



        params.msg = {}

        client.init(config)
        if(program.custom){
            params.msg.content = {}
            params.msg.content.message = {}
            params.msg.content.message[program.key] = program.message
            debug(JSON.stringify(params))
            client.pushMessage(params, function (err, result){
                if (err) {
                    return console.log(err)
                }
                process.stdout.write(result)
            })
        }else{
            params.msg.platform = program.platform
            params.msg.content = {
                n_content:  program.message
            };
            client.pushNotification(params, function (err, result){
                if (err) {
                    return console.log(err)
                }

                process.stdout.write(result)
            })
        }



    }else {
        showHelp()
    }
}






